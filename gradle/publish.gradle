//配置插件
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'com.jfrog.bintray'
apply from: rootProject.file('./gradle/publish-ext.gradle')
apply from: rootProject.file('./gradle/utils.gradle')

group = PROJECT_GROUP
project.archivesBaseName = PROJECT_ARTIFACT_ID
version = PROJECT_VERSION

install {
    repositories.mavenInstaller {
        // This generates POM.xml with proper parameters
        pom {
            project {
                // 项目描述。
                name PROJECT_DESCRIPTION

                groupId PROJECT_GROUP
                artifactId PROJECT_ARTIFACT_ID
                version PROJECT_VERSION

                packaging PROJECT_PACKAGE
                url PROJECT_WEBSITE

                // 软件开源协议，现在一般都是Apache License2.0吧，这里不需要修改。
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                //填写开发者基本信息。
                developers {
                    developer {
                        id DEVELOPER_ID        //填写开发者的一些基本信息
                        name DEVELOPER_NAME    //填写开发者的一些基本信息
                        email DEVELOPER_EMAIL   //填写开发者的一些基本信息
                    }
                }
                // SCM，复制我的，这里不需要修改。
                scm {
                    connection PROJECT_VCS
                    developerConnection PROJECT_VCS
                    url PROJECT_WEBSITE
                }
            }
        }
    }
}

if (isAndroidProject()) {
    // 生成jar包的task，不需要修改。
    task androidSourcesJar(type: Jar) {
        from android.sourceSets.main.java.srcDirs
        classifier = 'sources'
    }

    // 生成jarDoc的task，不需要修改。
    task androidJavadocs(type: Javadoc) {
        title = "${PROJECT_NAME} ${project.version} API"
        description "Generates Javadoc"
        source = android.sourceSets.main.java.srcDirs
        classpath += files(android.bootClasspath)
        failOnError = false

        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }

        exclude '**/R.html', '**/R.*.html', '**/index.html', '**/*.kt', '**/.gitkeep'

        options {
            windowTitle("${PROJECT_NAME} ${project.version} Reference")
            locale = 'en_US'
            encoding = 'UTF-8'
            charSet = 'UTF-8'
            links("http://docs.oracle.com/javase/7/docs/api/")
            linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
            setMemberLevel(JavadocMemberLevel.PUBLIC)
        }
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    artifacts {
        archives androidJavadocsJar
        archives androidSourcesJar
    }
} else {
    task sourcesJar(type: Jar) {
        from sourceSets.main.allJava
        archiveClassifier = 'sources'
    }

    javadoc {
        failOnError false
        options {
            // 语言
            locale 'en_US'
            encoding 'UTF-8'
            charSet 'UTF-8'
            links "http://docs.oracle.com/javase/7/docs/api"
        }
    }

    task javadocJar(type: Jar) {
        from javadoc
        archiveClassifier = 'javadoc'
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }
}

// 上传到bintray
bintray {
    user = BINTRAY_USER
    key = BINTRAY_KEY

    configurations = ['archives']
    pkg {
        userOrg = BINTRAY_ORG      //发布到JCenter的组织，注意新版本的bintray是需要手动创建的
        repo = BINTRAY_REPO          //发布到JCenter上的仓库名称，注意新版本的bintray是需要手动创建的
        // 发布到 bintray 上的项目名字
        name = BINTRAY_NAME
        websiteUrl = PROJECT_WEBSITE
        vcsUrl = PROJECT_VCS
        licenses = ["Apache-2.0"]
        publish = true  // 是否是公开项目
    }
}